html {
    box-sizing: border-box;
}

*,
*::before,
*::after {
    box-sizing: inherit;
}

html,
body {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    overflow: none;
}

body {
    background: #ffffff url('../img/geometry2.png'); /* Background pattern from Subtle Patterns */
    font-family: 'Coda', cursive;
}

.container {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}

h1 {
    font-family: 'Open Sans', sans-serif;
    font-weight: 300;
}

/*
 * Styles for the deck of cards
 */

.deck {
    width: 660px;
    min-height: 680px;
    background: linear-gradient(160deg, #02ccba 0%, #aa7ecd 100%);
    padding: 32px;
    border-radius: 10px;
    box-shadow: 12px 15px 20px 0 rgba(46, 61, 73, 0.5);
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    margin: 0 0 3em;
}

.deck .card {
    height: 125px;
    width: 125px;
    background: #2e3d49;
    font-size: 0;
    color: #ffffff;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 5px 2px 20px 0 rgba(46, 61, 73, 0.5);
}

.deck .card.open {
    transform: rotateY(0);
    background: #02b3e4;
    cursor: default;
    font-size: 33px;
    animation: show;
    animation-duration: 0.5s;
}

.deck .card.match {
    cursor: default;
    background: #02ccba;
    font-size: 33px;
    animation: cardMatch;
    animation-duration: 1.3s;
}

.deck .card.missmatch {
    animation: cardMissMatch;
    animation-duration: 1s;
}

/*
 * Styles for the Score Panel
 */

.score-panel {
    text-align: left;
    width: 345px;
    margin-bottom: 10px;
}

.score-panel .stars {
    margin: 0;
    padding: 0;
    display: inline-block;
    margin: 0 5px 0 0;
}

.score-panel .stars li {
    list-style: none;
    display: inline-block;
}

.score-panel .restart {
    float: right;
    cursor: pointer;
}

/* Game Hide */

.hide {
    display: none;
}

.result {
    box-shadow: 12px 15px 20px 0 rgba(46, 61, 73, 0.5);
    text-align: center;
    border: 2px solid black;
    margin: auto;
    animation: finalScore;
    animation-duration: 2s;
    justify-content: center;
    align-items: center;
    padding: 15px;
    width: 100%;
    border-radius: 15px;
    width: 400px;
}

.result.h1 {
    text-decoration: underline wavy;
}

/* Animations */

  @keyframes cardMissMatch {
    from {transform: none;}  
    15% {transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);}  
    30% {transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);}  
    45% {transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg);}  
    60% {transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg);}  
    75% {transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg);}  
    to {transform: none;}
    from {background-color: #02b3e4;}
    to {background-color: orangered;}
    from {font-size: 33px;}
    to {font-size: 33px;}
  }

  @keyframes cardMatch {
    from {transform: scale3d(1, 1, 1);}
    30% {transform: scale3d(1.25, 0.75, 1);}  
    40% {transform: scale3d(0.75, 1.25, 1);}  
    50% {transform: scale3d(1.15, 0.85, 1);}  
    65% {transform: scale3d(.95, 1.05, 1);}  
    75% {transform: scale3d(1.05, .95, 1);}  
    to {transform: scale3d(1, 1, 1);
    }
  }

  @keyframes show {
    from {transform: perspective(400px) rotate3d(0, 1, 0, 90deg);}
     40% {transform: perspective(400px) rotate3d(0, 1, 0, -20deg);}    
     60% {transform: perspective(400px) rotate3d(0, 1, 0, 10deg);}
     80% {transform: perspective(400px) rotate3d(0, 1, 0, -5deg);} 
      to {transform: perspective(400px);}
    }

  @keyframes finalScore {
    from, 20%, 40%, 60%, 80%, to {animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);}  
    0% {opacity: 0;transform: scale3d(.3, .3, .3);}  
    20% {transform: scale3d(1.1, 1.1, 1.1);}  
    40% {transform: scale3d(.9, .9, .9);}  
    60% {opacity: 1; transform: scale3d(1.03, 1.03, 1.03);}  
    80% {transform: scale3d(.97, .97, .97);}  
    to {opacity: 1;transform: scale3d(1, 1, 1);
    }
  }

